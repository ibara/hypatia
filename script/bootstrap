#!/usr/bin/env python
# Bootstrap script. Installs all required dependences as well as Hypatia in
# development mode.

from __future__ import print_function
import subprocess
import os
import sys
import readline

packages = {
    # 'package-manager': { 
    #     2: 'install-params-for-python-2',
    #     3: 'install-params-for-python-3',
    #  },

    'apt-get': {
        2: 'install python-pygame python-pip',
        3: 'install python3-dev python3-numpy python3-pip',
    },
    'pacman': {
        2: '-S --needed --noconfirm python2-pygame python2-pillow python2-pip',
        3: '-S --needed --noconfirm python-pip python-pillow mercurial',
    },
    'pkg': {
        2: 'install py27-pip py27-game',
    },
    'pkg_add': {
        2: 'py27-pip py27-game',
    },
}


special_cases = {
    "travis_ci": {
        "test": (lambda b: "TRAVIS" in os.environ.keys() and os.environ["TRAVIS"] == 'true'),
        "install_deps": False,
        "install_pip": True,
        "commands_root": [
            "apt-get update",
            "apt-get install --fix-missing mercurial python3-dev python3-numpy libav-tools libsdl-image1.2-dev libsdl-mixer1.2-dev libsdl-ttf2.0-dev libsmpeg-dev libsdl1.2-dev libportmidi-dev libswscale-dev libavformat-dev libavcodec-dev",
        ],
        "commands": [
            "pip install hg+http://bitbucket.org/pygame/pygame",
            "pip install -r requirements/travis.txt",
        ],
    },
    "arch_py3": {
        "test": (lambda b: b["pyver"]["base"] == "3" and b["pman"] == "pacman"),
        "commands": [
            "pip install hg+http://bitbucket.org/pygame/pygame",
        ],
    },
    "linuxmint_py3": {
        "test": (lambda b: b["pyver"]["base"] == "3" and b["pman"] == "apt-get" and "LinuxMint" in b["os"]), 
	"commands_root": [
            "apt-get install python3-pip python3-dev libsdl1.2-dev libsdl-image1.2-dev libsdl-mixer1.2-dev libsdl-ttf2.0-dev libsdl-gfx1.2-dev libsdl-net1.2-dev libsdl-image1.2-dev libsdl-mixer1.2-dev libsdl-ttf2.0-dev libsmpeg-dev libsdl1.2-dev libportmidi-dev libswscale-dev libavformat-dev libavcodec-dev libsdl-sge-dev libsdl-sound1.2-dev libportmidi-dev libsmpeg-dev",
        ],
	"commands": [
            "pip install hg+http://bitbucket.org/pygame/pygame",
	],
    },
}

def get_available_pythons():
    found = []
    
    for i in ['2.7', '3.3', '3.4']:
        try:
            subprocess.check_output(['which', 'python%s' % i], stderr=subprocess.STDOUT)
            found.append(i)

        except:

            continue

    return found

def guess_package_manager():
    found = None
    for i in packages.keys():
        try:
            out = subprocess.check_output(['which', i], stderr=subprocess.PIPE)
            return i

        except:
            # assume `which` returned an error code (meaning it wasn't found)

            continue    

def sudo(command):
    sudo_command = 'sudo -- {}'
    try:
        out = subprocess.check_output(['which', 'sudo'])
    except:
        sudo_command = "su -c '{}'"

    try:
        if subprocess.check_output("whoami").strip() == "root":
            sudo_command = '{}'
    except:
        pass

    return subprocess.call(sudo_command.format(command), shell=True, stdout=sys.stdout, stderr=sys.stderr)

def install(ver=None):
    # get canonical path for repository
    try: 
        path = subprocess.check_output("git rev-parse --show-toplevel", shell=True, stderr=subprocess.STDOUT).strip().decode("utf-8")
    except Exception as e:
        print("!! Unable to find Hypatia repository. Please make sure you cloned the repository using Git.")
        exit(1)

    # get python versions
    vers = get_available_pythons()

    pyver = None
    if ver != None and ver in vers:
        pyver = ver
    
    if pyver == None and len(vers) > 1:
        print("-> More than one Python version was found.")
        print("-> Available versions are:")
        for i in vers:
            print("  -> python%s" % i)
        print("-> Which version would you like to use?")
        
        def completer(text, state):
            starts = []
            for i in vers:
                if i.startswith(text):
                    starts.append(i)

            return starts[state]

        readline.parse_and_bind("tab: complete")
        readline.set_completer(completer)
        
        pyver = None
        while True:
            if 'raw_input' in dir(__builtins__):
                pyver = raw_input("=> ")
            else:
                pyver = input("=> ")

            if pyver.startswith("python"):
                pyver = pyver.split("python")[-1]
            if pyver not in vers:
                print("-> Not a valid version number.")
                continue

            break
    
    pybasever = pyver.split('.')[0]

    run_getpip = False  
    run_install = True

    # get package manager to use
    pman = guess_package_manager()
    if pman == None:
        raise RuntimeError("No suitable package manager found.")
    
    # check that the given package manager has packages for the selected python version
    if not int(pybasever) in packages[pman].keys():
        print("-> Your distribution does not support Hypatia with the selected Python version.")
        print("-> Please try again and select another Python version.")
        exit(1)

    # check special cases
    os_info = None
    if os.path.isfile("/etc/lsb-release"):
        fh = open("/etc/lsb-release")
        os_info = fh.read()
        fh.close()

    build_info = {'pyver': {'base': pybasever, 'ver': pyver}, 'pman': pman, 'os': os_info}
    for casename in special_cases.keys():
        case = special_cases[casename]
        if case['test'](build_info) == True:
            # run special case
            print("-> Running special case '%s'" % casename)

            if "install_deps" in case.keys():            
                run_install = case["install_deps"]
            if "install_pip" in case.keys():
                run_getpip = case["install_pip"]
           
            if "commands_root" in case.keys(): 
                for i in case['commands_root']:
                    assert 0 == sudo(i)
       
            if "commands" in case.keys():
                for i in case['commands']:
                    assert 0 == subprocess.call(i, shell=True, stdout=sys.stdout, stderr=sys.stderr)  


    if run_install:
        # attempt to install packages
        try:
            print("-> Installing Hypatia dependencies using %s" % pman)
            assert sudo("%s %s" % (pman, packages[pman][int(pybasever)])) == 0
        except Exception as e:
            raise RuntimeError("Error installing dependencies (using %s)" % pman)

    if run_getpip:
        if subprocess.call("python%s -m pip --version" % pyver, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE) == 0:
            print("-> Skipping Pip install as it's already present")
        else:
            print("-> Installing pip")
            print("!! Pip installation is not implemented yet and your platform is requesting it.")
            print("!! You can try installing Pip manually using easy_install.")

    # attempt to install remaining python deps
    try:
        print("-> Installing Hypatia python dependencies")

        py2install = "python%s -m pip install --user -r %s" % (pyver, os.path.join(path, "requirements", "python2.txt"))
        py3install = "python%s -m pip install --user -r %s" % (pyver, os.path.join(path, "requirements", "base.txt"))

        assert subprocess.call(py2install if pybasever == "2" else py3install, shell=True, stdout=sys.stdout, stderr=sys.stderr) == 0

    except Exception as e:
        print(e)
        raise RuntimeError("Error installing Python dependencies")

    # attempt to install hypatia
    try:
        print("-> Installing Hypatia")

        assert subprocess.call(['python%s' % pyver, '-m', 'pip', 'install', '--user', path], stdout=sys.stdout, stderr=sys.stderr) == 0

    except:
        raise RuntimeError("Error installing Hypatia via pip")

    print("-> Done!")
    return True

if __name__ == "__main__":
    pyver = None
    for i in sys.argv:
        if i.startswith("--help") or i.startswith("-h"):
            print("Usage: bootstrap [options]")
            print("Options:")
            print("--help, -h    r         Display this help")
            print("--ver=python_ver        Use Python version python_ver to install Hypatia")
            exit(0)
        if i.startswith('--ver='):
            pyver = i.split("=")[-1]
     
    try:
        assert install(ver=pyver) == True
    except Exception as e:
        print("An error occurred:\n%s" % str(e))
        exit(1)

